/**
 * Returns a value in seconds, equal to the number passed divided by 10. (2 => 0.2s)
 * Useful when generating duration or delay classnames. 
 */
@function get-duration($i, $subDivisions: 10) {
  @return calc(#{$i} / #{$subDivisions} * 1s * var(--duration-factor, 1));
}

/**
 * Returns a value in seconds, based on the locally-scoped --stagger-amount and
 * --stagger-delay values.
 */
@function get-stagger-delay($i) {
  /* prettier-ignore */
  @return calc(
    (#{$i} * var(--stagger-amount, 0.2s) + var(--stagger-delay, 0s)) * var(--duration-factor, 1)
  );
}

@mixin animation-state-initial {
  opacity: var(--start-alpha, 0);
  transform: translate(var(--start-x, 0), var(--start-y, 0))
    rotate(var(--start-rotate, 0deg)) scale(var(--start-scale, 1));
  transition-delay: var(--delay, 0s);
  transition-duration: var(--duration, 0.4s);
  transition-property: transform, opacity;
  transition-timing-function: var(--ease, ease-out);
}

@mixin animation-state-final {
  opacity: var(--end-alpha, 1);
  transform: translate(var(--end-x, 0), var(--end-y, 0)) rotate(var(--end-rotate, 0deg))
    scale(var(--end-scale, 1));
}
